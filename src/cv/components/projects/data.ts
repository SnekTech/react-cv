export type Project = {
    name: string,
    keywords: string[],
    points: string[],
}
export const syfProjects: Project[] = [
    // {
    //     name: '软件实现的光栅化渲染器',
    //     keywords: ['业余时间自学', 'C++', 'OpenGL', '计算机图形学', '光栅化', '渲染管线'],
    //     points: [
    //         `
    //   为了了解渲染管线底层的实现方法，使用纯软件的方式手动模拟硬件渲染管线的图形数据处理流程，
    //   通过各种 3D 数学运算将 3D 坐标系中的模型正确渲染到 2D 的显示设备上`,
    //         `
    //   基于 cmake mingw glfw glad 等技术在 Windows 桌面端搭建一个渲染器框架，
    //   使用 OpenGL 动态生成一个指定尺寸的纹理用来模拟渲染器的输出屏幕
    //   `,
    //         `
    //   提供一个 PutPixel(x, y, color) 方法来支持渲染一个像素至模拟屏幕纹理的某个坐标，
    //   以此为基础使用扫描线算法实现三角形的渲染，进而构建出整个软件渲染管线`,
    //         `
    //   实现了真实渲染管线的部分基础特性，包括 MVP 矩阵、左上规则的三角形光栅化、背面和深度剔除、
    //   纹理贴图、Shader 可配置、平行光源和点光源、镜面反射等`,
    //     ],
    // },
    {
        name: 'Roguelike 扫雷游戏',
        keywords: [ 'C#', 'Unity', 'Roguelike', '设计模式', 'TDD 测试驱动开发' ],
        points: [
            `使用 Roguelike 游戏元素对扫雷游戏的玩法进行扩展，部分机制的实现运用了一些经典设计模式`,
            `通过编写 Unity 自定义编辑器来批量产出游戏内容，比如管理道具池`,
            `实现了一个简单的逐帧动画播放模块，使用有限状态机来实现不同动画的衔接，并且使用自定义编辑器实现美术资源的自动化处理`,
            `尝试使用测试驱动开发的理论完成核心功能的开发，使用 Fluent Assertions 和 NSubstitute 等第三方库设计了高质量的单元测试`,
        ],
    },
    {
        name: '3D 人体姿态数据标注系统',
        keywords: [ '实习工作', '工具开发', 'Three.js', 'TypeScript', 'NestJS', '数据标注' ],
        points: [
            "主要目标是为人体姿态识别算法的训练提供标注好的数据集，算法需要从图片中识别人体姿态，因此标注工具需要预先给出",
            "为人体姿态识别算法的训练提供标注好的数据集",
            "为人体姿态识别算法的训练提供标注好的数据集",
            "为人体姿态识别算法的训练提供标注好的数据集",
        ],
    }
]
